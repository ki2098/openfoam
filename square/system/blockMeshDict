FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

convertToMeters 1;

vertices
(
    (0    0    0  ) //0
    (5    0    0  ) //1
    (6    0    0  ) //2
    (20   0    0  ) //3
    (0    0    0.1) //4
    (5    0    0.1) //5
    (6    0    0.1) //6
    (20   0    0.1) //7
    (0    4.5  0  ) //8
    (5    4.5  0  ) //9
    (6    4.5  0  ) //10
    (20   4.5  0  ) //11
    (0    4.5  0.1) //12
    (5    4.5  0.1) //13
    (6    4.5  0.1) //14
    (20   4.5  0.1) //15
    (0    5.5  0  ) //16
    (5    5.5  0  ) //17
    (6    5.5  0  ) //18
    (20   5.5  0  ) //19
    (0    5.5  0.1) //20
    (5    5.5  0.1) //21
    (6    5.5  0.1) //22
    (20   5.5  0.1) //23
    (0    10   0  ) //24
    (5    10   0  ) //25
    (6    10   0  ) //26
    (20   10   0  ) //27
    (0    10   0.1) //28
    (5    10   0.1) //29
    (6    10   0.1) //30
    (20   10   0.1) //31
);

blocks
(
    hex (0  1  9  8  4  5  13 12) (100 90 1) simpleGrading (1 1 1)
    hex (1  2  10 9  5  6  14 13) (20  90 1) simpleGrading (1 1 1)
    hex (2  3  11 10 6  7  15 14) (280 90 1) simpleGrading (1 1 1)
    hex (8  9  17 16 12 13 21 20) (100 20 1) simpleGrading (1 1 1)
    hex (10 11 19 18 14 15 23 22) (280 20 1) simpleGrading (1 1 1)
    hex (16 17 25 24 20 21 29 28) (100 90 1) simpleGrading (1 1 1)
    hex (17 18 26 25 21 22 30 29) (20  90 1) simpleGrading (1 1 1)
    hex (18 19 27 26 22 23 31 30) (280 90 1) simpleGrading (1 1 1)
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0  8  12 4 )
            (8  16 20 12)
            (16 24 28 20)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (7  15 11 3 )
            (15 23 19 11)
            (23 31 27 19)
        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (1  0  4  5 )
            (2  1  5  6 )
            (3  2  6  7 )
        );
    }
    top
    {
        type symmetryPlane;
        faces
        (
            (24 25 29 28)
            (25 26 30 29)
            (26 27 31 30)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (1  9  8  0 )
            (2  10 9  1 )
            (3  11 10 2 )
            (9  17 16 8 )
            (11 19 18 10)
            (17 25 24 16)
            (18 26 25 17)
            (19 27 26 18)
            (4  12 13 5 )
            (5  13 14 6 )
            (6  14 15 7 )
            (12 20 21 13)
            (14 22 23 15)
            (20 28 29 21)
            (21 29 30 22)
            (22 30 31 23)
        );
    }
    squareCylinder
    {
        type wall;
        faces
        (
            (13 21 17 9 )
            (21 22 18 17)
            (10 18 22 14)
            (9  10 14 13)
        );
    }
);